// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: apikeys.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (user_id, key_hash, label, rate_rpm)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, label, active, rate_rpm, created_at
`

type CreateAPIKeyParams struct {
	UserID  int64          `json:"user_id"`
	KeyHash []byte         `json:"key_hash"`
	Label   sql.NullString `json:"label"`
	RateRpm int32          `json:"rate_rpm"`
}

type CreateAPIKeyRow struct {
	ID        int64          `json:"id"`
	UserID    int64          `json:"user_id"`
	Label     sql.NullString `json:"label"`
	Active    bool           `json:"active"`
	RateRpm   int32          `json:"rate_rpm"`
	CreatedAt time.Time      `json:"created_at"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (CreateAPIKeyRow, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey,
		arg.UserID,
		arg.KeyHash,
		arg.Label,
		arg.RateRpm,
	)
	var i CreateAPIKeyRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Label,
		&i.Active,
		&i.RateRpm,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys WHERE user_id = $1 AND id = $2
`

type DeleteAPIKeyParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, deleteAPIKey, arg.UserID, arg.ID)
	return err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, user_id, key_hash, active, rate_rpm FROM api_keys WHERE key_hash = $1
`

type GetAPIKeyByHashRow struct {
	ID      int64  `json:"id"`
	UserID  int64  `json:"user_id"`
	KeyHash []byte `json:"key_hash"`
	Active  bool   `json:"active"`
	RateRpm int32  `json:"rate_rpm"`
}

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash []byte) (GetAPIKeyByHashRow, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByHash, keyHash)
	var i GetAPIKeyByHashRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.KeyHash,
		&i.Active,
		&i.RateRpm,
	)
	return i, err
}

const listAPIKeysByUser = `-- name: ListAPIKeysByUser :many
SELECT id, label, key_hash, active, rate_rpm, last_used_at, created_at FROM api_keys WHERE user_id = $1 AND active = TRUE
`

type ListAPIKeysByUserRow struct {
	ID         int64          `json:"id"`
	Label      sql.NullString `json:"label"`
	KeyHash    []byte         `json:"key_hash"`
	Active     bool           `json:"active"`
	RateRpm    int32          `json:"rate_rpm"`
	LastUsedAt sql.NullTime   `json:"last_used_at"`
	CreatedAt  time.Time      `json:"created_at"`
}

func (q *Queries) ListAPIKeysByUser(ctx context.Context, userID int64) ([]ListAPIKeysByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listAPIKeysByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAPIKeysByUserRow{}
	for rows.Next() {
		var i ListAPIKeysByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Label,
			&i.KeyHash,
			&i.Active,
			&i.RateRpm,
			&i.LastUsedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
