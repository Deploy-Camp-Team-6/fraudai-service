// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, plan) VALUES ($1, $2)
RETURNING id, email, plan, created_at, updated_at
`

type CreateUserParams struct {
	Email string `json:"email"`
	Plan  string `json:"plan"`
}

type CreateUserRow struct {
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
	Plan      string    `json:"plan"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Plan)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, email, plan, created_at, updated_at
FROM users
WHERE id = $1
`

type GetUserByIDRow struct {
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
	Plan      string    `json:"plan"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// keyset pagination
func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Plan,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsersPaged = `-- name: ListUsersPaged :many
SELECT id, email, plan, created_at FROM users
WHERE id > $1 ORDER BY id ASC LIMIT $2
`

type ListUsersPagedParams struct {
	ID    int64 `json:"id"`
	Limit int32 `json:"limit"`
}

type ListUsersPagedRow struct {
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
	Plan      string    `json:"plan"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListUsersPaged(ctx context.Context, arg ListUsersPagedParams) ([]ListUsersPagedRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersPaged, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersPagedRow{}
	for rows.Next() {
		var i ListUsersPagedRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Plan,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
