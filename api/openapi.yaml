openapi: 3.0.0
info:
  title: Go Production API
  description: An example API to showcase production-ready practices in Go.
  version: 1.0.0
servers:
  - url: /v1
paths:
  /profile:
    get:
      summary: Get user profile
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: A user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /apikeys:
    get:
      summary: List API keys
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
    post:
      summary: Create a new API key
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKeyRequest'
      responses:
        '201':
          description: API key created
  /apikeys/{id}:
    delete:
      summary: Delete an API key
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: API key deleted
  /vendor/ping:
    get:
      summary: Ping a vendor service
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: Vendor service is reachable
  /inference/models:
    get:
      summary: List loaded models
      security:
        - ApiKeyAuth: []
        - BearerAuth: []
      responses:
        '200':
          description: A list of loaded models
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model'
  /inference/predict:
    post:
      summary: Get fraud prediction
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictRequest'
      responses:
        '200':
          description: Prediction result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictResponse'

  /fraud/predict:
    post:
      summary: Get fraud prediction
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictRequest'
      responses:
        '200':
          description: Prediction result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictResponse'
  /auth/sign-up:
    post:
      summary: Register a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: User registered and token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/sign-in:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: User authenticated and token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/me:
    get:
      summary: Retrieve the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Authenticated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
          format: email
        plan:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    APIKey:
      type: object
      properties:
        id:
          type: integer
          format: int64
        label:
          type: string
        key:
          type: string
          description: Masked API key with first 10 and last 6 characters visible
        active:
          type: boolean
        rate_rpm:
          type: integer
        last_used_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    APIKeyRequest:
      type: object
      properties:
        label:
          type: string
        rate_rpm:
          type: integer
    SignUpRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    SignInRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    PredictRequest:
      type: object
      properties:
        model:
          type: string
        features:
          type: object
          additionalProperties: {}
      required:
        - model
        - features
    PredictResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            model_name:
              type: string
            run_id:
              type: string
            request_id:
              type: string
            timestamp:
              type: string
              format: date-time
            latency_ms:
              type: number
        result:
          type: object
          properties:
            prediction:
              type: integer
            score:
              type: number
            threshold:
              type: number
      required:
        - meta
        - result
    Model:
      type: object
      properties:
        model_type:
          type: string
        name:
          type: string
        version:
          type: string
        stage:
          type: string
        run_id:
          type: string
        signature_inputs:
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
